# !CAVEATS!
#
# This is by far a serious SECURITY VULNERABILITY
#
# By serving hadui ws with no authentication,
# an arbitrary code execution exploit is created
# on the computer. This is less threatening in an
# trusted close (like typical HPC) environment,
# but as it being. When more people start using hadui,
# this exploit will become more profitable for hostile
# attackers, after some threshold, there should be
# someone to implement some sort of ws authentication
# as a solution. wss client certificate may be a
# reasonable choice.

# this cfg file 'hadui.yaml' is located by hadui besides
# the nearest 'stack.yaml' up from cwd you run hadui.
# it uses `stack path --project-root` to locate the dir.

# by default, only the local interface is bound to listen
# for hadui ws connections, this hardens the arbitrary
# code execution vulnerability a bit. but for you or your
# collegues to access hadui web front from other machines,
# bind to one of the external interfaces, or simply all
# interfaces by specifying '0.0.0.0'.
bind-interface: 0.0.0.0
http-port: 5050
ws-port: 5051

# backend log level
log-level: DEBUG

# need a GHC executable supports ':frontend <PluginModule>' command
# see https://gitlab.haskell.org/ghc/ghc/issues/17348
with-ghc: ghc-ife

# additional options passed to GHCi
ghci-options:
  # run project code compiled, instead of interpreted,
  # for performance
  - -fobject-code

# additional options passed to both GHC and GHCi
ghc-options:
  # language features to be used
  - -XScopedTypeVariables
  - -XPartialTypeSignatures
  - -XBlockArguments
  - -XRankNTypes
  - -XFlexibleContexts
  - -XExistentialQuantification
  - -XMultiParamTypeClasses
  - -XFlexibleInstances
  - -XGeneralizedNewtypeDeriving
  - -XTypeFamilies
  - -XUndecidableInstances
  - -XBangPatterns
  - -XLambdaCase
  - -XQuasiQuotes

  # limit parallelism on a developer's machine
  - -with-rtsopts=-maxN3
